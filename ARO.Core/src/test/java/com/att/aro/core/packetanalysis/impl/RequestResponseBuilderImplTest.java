/**
 * 
 */
package com.att.aro.core.packetanalysis.impl;

import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.SortedMap;
import java.util.TreeMap;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import com.att.aro.core.BaseTest;
import com.att.aro.core.packetanalysis.IRequestResponseBuilder;
import com.att.aro.core.packetanalysis.pojo.HttpRequestResponseInfo;
import com.att.aro.core.packetanalysis.pojo.PacketInfo;
import com.att.aro.core.packetanalysis.pojo.Session;
import com.att.aro.core.packetreader.pojo.IPPacket;
import com.att.aro.core.packetreader.pojo.Packet;
import com.att.aro.core.packetreader.pojo.PacketDirection;
import com.att.aro.core.packetreader.pojo.TCPPacket;
import com.att.aro.core.packetreader.pojo.UDPPacket;

/**
 * RequestResponseBuilderImplTest
 * 
 *
 *
 */
public class RequestResponseBuilderImplTest extends BaseTest {

	RequestResponseBuilderImpl rrBuilder;

	@Before
	public void setUp() {
		rrBuilder = (RequestResponseBuilderImpl)context.getBean(IRequestResponseBuilder.class);
	}
	
	@Test
	public void testSessionChunkedMocked() throws IOException {
		
		Session session = Mockito.mock(Session.class);
		Mockito.when(session.isUDP()).thenReturn(false);

		TreeMap<Integer, PacketInfo> dlPacketOffsets = new TreeMap<Integer, PacketInfo>();
		TreeMap<Integer, PacketInfo> ulPacketOffsets = new TreeMap<Integer, PacketInfo>();
		
		List<PacketInfo> packets = new ArrayList<PacketInfo>();
		
		Mockito.when(session.getStorageUl()).thenReturn((
				"\r\n" 
				+ "POST /com.nelsoft.areeba/Services/Login/RequestLoginUser HTTP/1.1" + "\r\n"
				+ "Accept: application/json" + "\r\n"
				+ "Content-type: text/plain" + "\r\n"
				+ "Content-Length: 229" + "\r\n"
				+ "Host: 24.16.97.108:8080" + "\r\n"
				+ "Connection: Keep-Alive" + "\r\n"
				+ "User-Agent: Apache-HttpClient/UNAVAILABLE (java 1.4)" + "\r\n"
				+ "\r\n"
				+"{\"accountID\":0,\"tokenID\":-5,\"userID\":-1,\"status\":\"\",\"serverHashKey\":\"\",\"deviceHash\":\"\",\"userPIN\":\"1234\",\"userName\":\"Barry\",\"deviceIMEI\":\"358239057521132 LGE Model Nexus 5 Version 4.4.2\",\"deviceIMSI\":\" \",\"versionNumber\":\"1.0.0.0\"}"
		).getBytes());
		Mockito.when(session.getStorageDl()).thenReturn(new byte[] {
				72, 84, 84, 80, 47, 49, 46, 49, 32, 50, 48, 48, 32, 79, 75, 13, 10, 83, 101, 114, 118, 101, 114, 58, 32, 110, 103, 105, 110, 120, 13, 10, 68, 97, 116, 101, 58, 32, 84, 104, 117, 44, 32, 49, 49, 32, 68, 101, 99, 32, 50, 48, 49, 52, 32, 48, 48, 58, 53, 54, 58, 51, 57, 32, 71, 77, 84, 13, 10, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 13, 10, 84, 114, 97, 110, 115, 102, 101, 114, 45, 69, 110, 99, 111, 100, 105, 110, 103, 58, 32, 99, 104, 117, 110, 107, 101, 100, 13, 10, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 58, 32, 107, 101, 101, 112, 45, 97, 108, 105, 118, 101, 13, 10, 86, 97, 114, 121, 58, 32, 65, 99, 99, 101, 112, 116, 45, 69, 110, 99, 111, 100, 105, 110, 103, 13, 10, 76, 97, 115, 116, 45, 77, 111, 100, 105, 102, 105, 101, 100, 58, 32, 83, 97, 116, 44, 32, 48, 54, 32, 68, 101, 99, 32, 50, 48, 49, 52, 32, 48, 49, 58, 49, 57, 58, 50, 51, 32, 71, 77, 84, 13, 10, 67, 97, 99, 104, 101, 45, 67, 111, 110, 116, 114, 111, 108, 58, 32, 109, 97, 120, 45, 97, 103, 101, 61, 49, 48, 44, 32, 112, 117, 98, 108, 105, 99, 13, 10, 67, 111, 110, 116, 101, 110, 116, 45, 69, 110, 99, 111, 100, 105, 110, 103, 58, 32, 103, 122, 105, 112, 13, 10, 13, 10, 50, 51, 13, 10, 31, -117, 8, 0, 0, 0, 0, 0, 0, 3, -53, -55, 44, 75, 45, 46, 41, 74, 77, -52, -43, -88, -82, -43, -76, 6, 0, 21, -26, 15, -5, 15, 0, 0, 0, 13, 10, 48, 13, 10, 13, 10, 72, 84, 84, 80, 47, 49, 46, 49, 32, 50, 48, 48, 32, 79, 75, 13, 10, 83, 101, 114, 118, 101, 114, 58, 32, 110, 103, 105, 110, 120, 13, 10, 68, 97, 116, 101, 58, 32, 84, 104, 117, 44, 32, 49, 49, 32, 68, 101, 99, 32, 50, 48, 49, 52, 32, 48, 48, 58, 53, 54, 58, 52, 48, 32, 71, 77, 84, 13, 10, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 13, 10, 84, 114, 97, 110, 115, 102, 101, 114, 45, 69, 110, 99, 111, 100, 105, 110, 103, 58, 32, 99, 104, 117, 110, 107, 101, 100, 13, 10, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 58, 32, 107, 101, 101, 112, 45, 97, 108, 105, 118, 101, 13, 10, 86, 97, 114, 121, 58, 32, 65, 99, 99, 101, 112, 116, 45, 69, 110, 99, 111, 100, 105, 110, 103, 13, 10, 76, 97, 115, 116, 45, 77, 111, 100, 105, 102, 105, 101, 100, 58, 32, 87, 101, 100, 44, 32, 48, 53, 32, 78, 111, 118, 32, 50, 48, 49, 52, 32, 49, 53, 58, 50, 48, 58, 50, 50, 32, 71, 77, 84, 13, 10, 67, 97, 99, 104, 101, 45, 67, 111, 110, 116, 114, 111, 108, 58, 32, 109, 97, 120, 45, 97, 103, 101, 61, 49, 48, 44, 32, 112, 117, 98, 108, 105, 99, 13, 10, 67, 111, 110, 116, 101, 110, 116, 45, 69, 110, 99, 111, 100, 105, 110, 103, 58, 32, 103, 122, 105, 112, 13, 10, 13, 10, 57, 56, 13, 10, 31, -117, 8, 0, 0, 0, 0, 0, 0, 3, 75, -53, -55, 44, 40, 72, 45, -46, -88, 86, 42, -120, 47, 45, -54, 81, -78, 82, 80, -54, 40, 41, 41, -80, -46, -41, 79, 73, 44, 73, -44, 75, -50, -53, -45, 75, -50, -49, -43, -49, 42, -50, -49, 43, -48, 55, 45, -42, 119, -11, 113, 117, 14, -15, -12, -9, -45, 55, 50, 48, 52, -47, 79, 43, -51, -55, -47, 15, -56, -49, -53, -87, -44, 3, -87, 80, -46, 81, 42, 38, -61, -108, -92, -4, 2, -3, 98, -104, 1, 25, 100, 26, -112, 1, 51, -96, -76, 0, -24, -14, 84, -49, -68, -110, -44, -94, -78, 68, -112, -121, -116, 13, 64, 64, 71, 41, 37, -77, -72, 32, 39, -79, 18, 40, -110, -106, -104, 83, -100, 90, -85, 105, 13, 0, 18, -46, 46, 10, -3, 0, 0, 0, 13, 10, 48, 13, 10, 13, 10}
		);
		
		Mockito.when(session.getPacketOffsetsDl()).thenReturn(dlPacketOffsets);
		Mockito.when(session.getPacketOffsetsUl()).thenReturn(ulPacketOffsets);
		
		Mockito.when(session.getRemoteHostName()).thenReturn("remoteHostName");
		Mockito.when(session.getRemotePort()).thenReturn(80);
		Mockito.when(session.getPackets()).thenReturn(packets);
				
		List<HttpRequestResponseInfo> aResult = rrBuilder.createRequestResponseInfo(session);
		assertTrue(aResult.size() == 3);
		assertTrue(aResult.get(0).getHostName().equals("24.16.97.108"));
		
		// now try downlink
		rrBuilder.extractHttpRequestResponseInfo(PacketDirection.DOWNLINK);
		List<HttpRequestResponseInfo> bResult = rrBuilder.getResult();
		assertTrue(bResult.size() == 5);
		assertTrue(bResult.get(0).getAllHeaders().equals(" Accept: application/json Content-type: text/plain Content-Length: 229 Host: 24.16.97.108:8080 Connection: Keep-Alive User-Agent: Apache-HttpClient/UNAVAILABLE (java 1.4)"));

		
		Mockito.when(session.getStorageUl()).thenReturn(
				("GET /cnn/dam/assets/141210153919-panono-tease-avatar.jpg HTTP/1.1\r\n"
				 + "Host: i2.cdn.turner.com\r\n"
				 + "Connection: keep-alive\r\n"
				 + "Accept: image/webp,*/*;q=0.8\r\n"
				 + "User-Agent: Mozilla/5.0 (Linux; Android 4.4.4; Nexus 5 Build/KTU84P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.59 Mobile Safari/537.36\r\n"
				 + "Referer: http://www.cnn.com/\r\n"
				 + "Accept-Encoding: gzip, deflate, sdch\r\n"
				 + "Accept-Language: en-US,en;q=0.8\r\n"
				 + "\r\n").getBytes());
		Mockito.when(session.getStorageDl()).thenReturn(("HTTP/1.1 200 OK\r\n"
				 + "Server: mock\r\n"
				 + "Date: Thu, 11 Dec 2014 00:56:39 GMT\r\n"
				 + "Content-Type: application/javascript\r\n"
				 + "Transfer-Encoding: chunked\r\n"
				 + "Connection: keep-alive\r\n"
				 + "Vary: Accept-Encoding\r\n"
				 + "Last-Modified: Sat, 06 Dec 2014 01:19:23 GMT\r\n"
				 + "Cache-Control: max-age=10, public\r\n"
				 + "Content-Encoding: gzip\r\n"
				 + "\r\n"
				).getBytes());
		
		rrBuilder.extractHttpRequestResponseInfo(PacketDirection.DOWNLINK);
		List<HttpRequestResponseInfo> result = rrBuilder.getResult();
		
		assertTrue(result.size() == 6);
		assertTrue(result.get(0).getAllHeaders().equals(" Accept: application/json Content-type: text/plain Content-Length: 229 Host: 24.16.97.108:8080 Connection: Keep-Alive User-Agent: Apache-HttpClient/UNAVAILABLE (java 1.4)"));

		rrBuilder.extractHttpRequestResponseInfo(PacketDirection.UPLINK);
		result = rrBuilder.getResult();
		assertTrue(result.size() == 7);
		assertTrue(result.get(0).getAllHeaders().equals(" Accept: application/json Content-type: text/plain Content-Length: 229 Host: 24.16.97.108:8080 Connection: Keep-Alive User-Agent: Apache-HttpClient/UNAVAILABLE (java 1.4)"));
		

	}
	
	@Test
	public void testSessionChunked() throws IOException {
		List<PacketInfo> packetList = null;

		// load a real session with chunked data
		packetList = getPacketListChunked();
		
		InetAddress remoteIP = null;
		int remotePort = 0;
		int localPort = 0;
		try {
			// Source: 157.166.239.38 (157.166.239.38)
			// Destination: 192.168.1.10 (192.168.1.10)
			remoteIP = InetAddress.getByAddress(new byte[] { (byte) 157, (byte) 166, (byte) 239, 38 });
			remotePort = 80;
			localPort = 48449;
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}

		Session session = new Session(remoteIP, remotePort, localPort);
		session.setRemoteHostName("the.remote.host");
		session.setPackets(packetList);
		
		Packet packet = packetList.get(3).getPacket();
//		byte[] storageUl = ("GET /jsonp/ELECTION/2012/meta/live-video.json?callback=livestream HTTP/1.1\r\n"
//						 + "Host: data.cnn.com\r\n"
//						 + "Connection: keep-alive\r\n"
//						 + "Accept: */*\r\n"
//						 + "User-Agent: Mozilla/5.0 (Linux; Android 4.4.4; Nexus 5 Build/KTU84P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.59 Mobile Safari/537.36\r\n"
//						 + "Referer: http://www.cnn.com/\r\n"
//						 + "Accept-Encoding: gzip, deflate, sdch\r\n"
//						 + "Accept-Language: en-US,en;q=0.8\r\n"
//						 + "Cookie: optimizelySegments=%7B%22170864810%22%3A%22true%22%2C%22171854392%22%3A%22none%22%2C%22172332155%22%3A%22direct%22%2C%22172426739%22%3A%22gc%22%7D; optimizelyEndUserId=oeu1418259399276r0.8895107842981815; optimizelyBuckets=%7B%7D; optimizelyPendingLogEvents=%5B%5D\r\n"
//						 + "\r\n"
//				).getBytes();
		byte[] storageUl = Arrays.copyOfRange(packet.getData(), 86, packet.getLen());
		session.setStorageUl(storageUl);
		
		packet = packetList.get(5).getPacket();
//		byte[] storageDl = ("HTTP/1.1 200 OK\r\n"
//						 + "Server: nginx\r\n"
//						 + "Date: Thu, 11 Dec 2014 00:56:39 GMT\r\n"
//						 + "Content-Type: application/javascript\r\n"
//						 + "Transfer-Encoding: chunked\r\n"
//						 + "Connection: keep-alive\r\n"
//						 + "Vary: Accept-Encoding\r\n"
//						 + "Last-Modified: Sat, 06 Dec 2014 01:19:23 GMT\r\n"
//						 + "Cache-Control: max-age=10, public\r\n"
//						 + "Content-Encoding: gzip\r\n"
//						 + "\r\n"
//						).getBytes();
		byte[] storageDl = Arrays.copyOfRange(packet.getData(), 89, packet.getLen());
		session.setStorageDl(storageDl);

		SortedMap<Integer, PacketInfo> ulPacketOffsets = new TreeMap<Integer, PacketInfo>();
		SortedMap<Integer, PacketInfo> dlPacketOffsets = new TreeMap<Integer, PacketInfo>();
		ulPacketOffsets.put(0, packetList.get(3));
		dlPacketOffsets.put(0, packetList.get(5));

		/* UPLINK DATA
		 *  93=Accept: application/json
		 * 119=Content-type: text/plain
		 * 140=Content-Length: 229
		 * 165=Host: 24.16.97.108:8080
		 * 189=Connection: Keep-Alive
		 * 243=User-Agent: Apache-HttpClient/UNAVAILABLE (java 1.4)
		 */
		session.setPacketOffsetsDl(dlPacketOffsets);
		
		/* DOWNLINK DATA
		 *   44=Server: Apache-Coyote/1.1
		 *   65=Content-Length: 239
		 *  102=Date: Thu, 22 Jan 2015 01:51:32 GMT
		 */
		session.setPacketOffsetsUl(ulPacketOffsets);


		List<HttpRequestResponseInfo> info = rrBuilder.createRequestResponseInfo(session);

		assertTrue(info.size() == 1);
		assertTrue(info.get(0).getAllHeaders().equals(" Server: nginx Date: Thu, 11 Dec 2014 00:56:39 GMT Content-Type: application/javascript Transfer-Encoding: chunked Connection: keep-alive Vary: Accept-Encoding Last-Modified: Sat, 06 Dec 2014 01:19:23 GMT Cache-Control: max-age=10, public Content-Encoding: gzip"));

	}
	
	@Test
	public void testSession1() throws IOException{
		List<PacketInfo> packetList = null;
		packetList = getPacketList1();

		InetAddress remoteIP = null;
		int remotePort = 0;
		int localPort = 0;
		try {
			remoteIP = InetAddress.getByAddress(new byte[] { (byte) 192, (byte) 168, 1, 1 });
			remotePort = 1234;
			localPort = 4321;
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}

		Session session = new Session(remoteIP, remotePort, localPort);
		session.setRemoteHostName("the.remote.host");
		session.setPackets(packetList);
		byte[] storageUl = packetList.get(0).getPacket().getData();
		session.setStorageUl(storageUl);
		byte[] storageDl = packetList.get(2).getPacket().getData();
		session.setStorageDl(storageDl);

		SortedMap<Integer, PacketInfo> dlPacketOffsets = new TreeMap<Integer, PacketInfo>();
		SortedMap<Integer, PacketInfo> ulPacketOffsets = new TreeMap<Integer, PacketInfo>();

		session.setPacketOffsetsDl(dlPacketOffsets);
		session.setPacketOffsetsUl(ulPacketOffsets);

		List<HttpRequestResponseInfo> result = rrBuilder.createRequestResponseInfo(session);
		
		assertTrue(result.size() == 2);
		assertTrue(result.get(0).getAllHeaders().equals(" Date: Tue, 04 Jun 2013 20:23:44 GMT P3P: policyref=\"http://info.yahoo.com/w3c/p3p.xml\", CP=\"CAO DSP COR CUR ADM DEV TAI PSA PSD IVAi IVDi CONi TELo OTPi OUR DELi SAMi OTRi UNRi PUBi IND PHY ONL UNI PUR FIN COM NAV INT DEM CNT STA POL HEA PRE LOC GOV\" Cache-Control: no-cache, no-store, private Pragma: no-cache Content-Length: 43 Connection: close Content-Type: image/gif"));

	}

	@Test
	public void testSession2() throws IOException{
		List<PacketInfo> packetList = null;
		packetList = getPacketList2();	// 32.8

		InetAddress remoteIP = null;
		int remotePort = 0;
		int localPort = 0;
		try {
			remoteIP = InetAddress.getByAddress(new byte[] { 24, 16, (byte) 97, (byte) 108 });
			remotePort = 8080;
			localPort = 4321;
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}

		Session session = new Session(remoteIP, remotePort, localPort);
		session.setRemoteHostName("the.remote.host");
		session.setPackets(packetList);
		
		Packet packet = packetList.get(3).getPacket();
		byte[] storageUl = Arrays.copyOfRange(packet.getData(), packet.getDataOffset(), packet.getLen());
		session.setStorageUl(storageUl);
		
		packet = packetList.get(6).getPacket();
		byte[] storageDl = Arrays.copyOfRange(packet.getData(), packet.getDataOffset(), packet.getLen());
		session.setStorageDl(storageDl);

		SortedMap<Integer, PacketInfo> ulPacketOffsets = new TreeMap<Integer, PacketInfo>();
		SortedMap<Integer, PacketInfo> dlPacketOffsets = new TreeMap<Integer, PacketInfo>();
		ulPacketOffsets.put(0, packetList.get(3));
		dlPacketOffsets.put(0, packetList.get(6));

		session.setPacketOffsetsDl(dlPacketOffsets);
		session.setPacketOffsetsUl(ulPacketOffsets);

		List<HttpRequestResponseInfo> info = null;
		info = rrBuilder.createRequestResponseInfo(session);
		
		assertTrue(info.size() == 2);
		assertTrue(info.get(0).getAllHeaders().equals(" Accept: application/json Content-type: text/plain Content-Length: 229 Host: 24.16.97.108:8080 Connection: Keep-Alive User-Agent: Apache-HttpClient/UNAVAILABLE (java 1.4)"));

	}
	
	@Test
	public void testExtractHttpRequestResponseInfo() throws IOException{
		
		Session session = Mockito.mock(Session.class);
		PacketInfo pi1 = Mockito.mock(PacketInfo.class);
		Mockito.when(pi1.getTimeStamp()).thenReturn(1000.0d);
		Mockito.when(pi1.getTcpFlagString()).thenReturn("F");
		
		TCPPacket mTcpPacket = Mockito.mock(TCPPacket.class);
		
		PacketInfo pi2 = Mockito.mock(PacketInfo.class);
		Mockito.when(pi2.getPacket()).thenReturn(mTcpPacket);
		Mockito.when(pi2.getTcpFlagString()).thenReturn("");

		Mockito.when(session.isUDP()).thenReturn(false);

		TreeMap<Integer, PacketInfo> dlPacketOffsets = new TreeMap<Integer, PacketInfo>();
		TreeMap<Integer, PacketInfo> ulPacketOffsets = new TreeMap<Integer, PacketInfo>();
		dlPacketOffsets.put(14, pi1);
		ulPacketOffsets.put(14, pi2);
		
		List<PacketInfo> packets = new ArrayList<PacketInfo>();
		packets.add(pi1);
		packets.add(pi2);
		
		String ulh = "\r\n" 
				+ "POST /com.nelsoft.areeba/Services/Login/RequestLoginUser HTTP/1.1" + "\r\n"
				+ "Accept: application/json" + "\r\n"
				+ "Content-type: text/plain" + "\r\n"
				+ "Content-Length: 229" + "\r\n"
				+ "Host: 24.16.97.108:8080" + "\r\n"
				+ "Connection: Keep-Alive" + "\r\n"
				+ "User-Agent: Apache-HttpClient/UNAVAILABLE (java 1.4)" + "\r\n"
				+ "\r\n"
				+ "" + "\r\n"
				+"{\"accountID\":0,\"tokenID\":-5,\"userID\":-1,\"status\":\"\",\"serverHashKey\":\"\",\"deviceHash\":\"\",\"userPIN\":\"1234\",\"userName\":\"Barry\",\"deviceIMEI\":\"358239057521132 LGE Model Nexus 5 Version 4.4.2\",\"deviceIMSI\":\" \",\"versionNumber\":\"1.0.0.0\"}"
				;
		
		Mockito.when(session.getStorageUl()).thenReturn(ulh.getBytes());
		Mockito.when(session.getStorageDl()).thenReturn(
				("HTTP/1.1 200 OK" + "\r\n"
				+ "Server: Apache-Coyote/1.1" + "\r\n"
				+ "Content-Length: 239" + "\r\n"
				+ "Date: Thu, 22 Jan 2015 01:51:32 GMT" + "\r\n"
				+ "" + "\r\n"
				+"{\"userName\":\"Barry\",\"userID\":12357,\"userPIN\":\"1234\",\"deviceIMSI\":\" \",\"deviceIMEI\":\"358239057521132 LGE Model Nexus 5 Version 4.4.2\",\"versionNumber\":\"1.0.0.0\",\"deviceHash\":\"\",\"status\":\"ok\",\"tokenID\":539,\"accountID\":4231,\"serverHashKey\":\"\"}"
				).getBytes());
		
		Mockito.when(session.getPacketOffsetsDl()).thenReturn(dlPacketOffsets);
		Mockito.when(session.getPacketOffsetsUl()).thenReturn(ulPacketOffsets);
		
		Mockito.when(session.getRemoteHostName()).thenReturn("remoteHostName");
		Mockito.when(session.getDnsRequestPacket()).thenReturn(pi1);
		Mockito.when(session.getDnsResponsePacket()).thenReturn(pi2);
		Mockito.when(session.getPackets()).thenReturn(packets);
		Mockito.when(session.getLastSslHandshakePacket()).thenReturn(pi1);

		rrBuilder.createRequestResponseInfo(session);
		rrBuilder.extractHttpRequestResponseInfo(PacketDirection.DOWNLINK);
		List<HttpRequestResponseInfo> bResult = rrBuilder.getResult();
		assertTrue(bResult.size() == 4);
		assertTrue(bResult.get(0).getAllHeaders().equals(" Accept: application/json Content-type: text/plain Content-Length: 229 Host: 24.16.97.108:8080 Connection: Keep-Alive User-Agent: Apache-HttpClient/UNAVAILABLE (java 1.4)"));
		
		Mockito.when(session.getStorageUl()).thenReturn(
				("GET /cnn/dam/assets/141210153919-panono-tease-avatar.jpg HTTP/1.1\r\n"
				 + "Host: i2.cdn.turner.com\r\n"
				 + "Connection: keep-alive\r\n"
				 + "Accept: image/webp,*/*;q=0.8\r\n"
				 + "User-Agent: Mozilla/5.0 (Linux; Android 4.4.4; Nexus 5 Build/KTU84P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.59 Mobile Safari/537.36\r\n"
				 + "Referer: http://www.cnn.com/\r\n"
				 + "Accept-Encoding: gzip, deflate, sdch\r\n"
				 + "Accept-Language: en-US,en;q=0.8\r\n"
				 + "\r\n").getBytes());
		Mockito.when(session.getStorageDl()).thenReturn(
				("HTTP/1.1 200 OK\r\n"
				 + "Server: Apache-Coyote/1.1\r\n"
				 + "Content-Type: image/jpeg\r\n"
				 + "Content-Length: 8443\r\n"
				 + "Cache-Control: max-age=5014\r\n"
				 + "Expires: Thu, 11 Dec 2014 02:20:13 GMT\r\n"
				 + "Date: Thu, 11 Dec 2014 00:56:39 GMT\r\n"
				 + "Connection: keep-alive\r\n").getBytes());
		
			rrBuilder.extractHttpRequestResponseInfo(PacketDirection.DOWNLINK);
			List<HttpRequestResponseInfo> result = rrBuilder.getResult();
			
			assertTrue(result.size() == 4);
			assertTrue(result.get(0).getAllHeaders().equals(" Accept: application/json Content-type: text/plain Content-Length: 229 Host: 24.16.97.108:8080 Connection: Keep-Alive User-Agent: Apache-HttpClient/UNAVAILABLE (java 1.4)"));
	
			rrBuilder.extractHttpRequestResponseInfo(PacketDirection.UPLINK);
			result = rrBuilder.getResult();
			assertTrue(result.size() == 5);
			assertTrue(result.get(0).getAllHeaders().equals(" Accept: application/json Content-type: text/plain Content-Length: 229 Host: 24.16.97.108:8080 Connection: Keep-Alive User-Agent: Apache-HttpClient/UNAVAILABLE (java 1.4)"));
	
	}
	
	/*
	 *  test data prep & load
	 */
	
	/**
	 * Loads byte arrays into Packets into PacketInfo into a ArrayList
	 * @return List
	 */
	public List<PacketInfo> getPacketListChunked() {
		char[][] data = {
				// 0
				{ 0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x48, 0x59, 0x29, 0xf9, 0x25, 0x7b, 0x00, 0x00, 0x08, 0x00, 0x45, 0x00, 0x00, 0x3c, 0x7c, 0x08, 0x40, 0x00, 0x40, 0x06, 0x70,
						0x34, 0xc0, 0xa8, 0x01, 0x0a, 0x9d, 0xa6, 0xef, 0x26, 0xbd, 0x41, 0x00, 0x50, 0x3a, 0xa4, 0x9f, 0x64, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x02, 0xff, 0xff, 0x4e,
						0xae, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a, 0x00, 0x02, 0xe3, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x06},
				// 1
				{ 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x84, 0xdb, 0x2f, 0x0b, 0xfe, 0xf0, 0x00, 0x00, 0x08, 0x00, 0x45, 0x58, 0x00, 0x3c, 0x00, 0x00, 0x40, 0x00, 0x3e, 0x06, 0xed,
						0xe4, 0x9d, 0xa6, 0xef, 0x26, 0xc0, 0xa8, 0x01, 0x0a, 0x00, 0x50, 0xbd, 0x41, 0x23, 0xe4, 0x08, 0x37, 0x3a, 0xa4, 0x9f, 0x65, 0xa0, 0x12, 0x35, 0xd4, 0x1c,
						0xba, 0x00, 0x00, 0x02, 0x04, 0x05, 0x50, 0x04, 0x02, 0x08, 0x0a, 0x0b, 0x24, 0xf4, 0xfa, 0x00, 0x02, 0xe3, 0x6c, 0x01, 0x03, 0x03, 0x09},
				// 2
				{ 0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x48, 0x59, 0x29, 0xf9, 0x25, 0x7b, 0x00, 0x00, 0x08, 0x00, 0x45, 0x00, 0x00, 0x34, 0x7c, 0x09, 0x40, 0x00, 0x40, 0x06, 0x70,
						0x3b, 0xc0, 0xa8, 0x01, 0x0a, 0x9d, 0xa6, 0xef, 0x26, 0xbd, 0x41, 0x00, 0x50, 0x3a, 0xa4, 0x9f, 0x65, 0x23, 0xe4, 0x08, 0x38, 0x80, 0x10, 0x05, 0x59, 0x4e,
						0xa6, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x00, 0x02, 0xe3, 0x73, 0x0b, 0x24, 0xf4, 0xfa},
				// 3
				{ 0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x48, 0x59, 0x29, 0xf9, 0x25, 0x7b, 0x00, 0x00, 0x08, 0x00, 0x45, 0x00, 0x02, 0xc8, 0x7c, 0x0a, 0x40, 0x00, 0x40, 0x06, 0x6d,
						0xa6, 0xc0, 0xa8, 0x01, 0x0a, 0x9d, 0xa6, 0xef, 0x26, 0xbd, 0x41, 0x00, 0x50, 0x3a, 0xa4, 0x9f, 0x65, 0x23, 0xe4, 0x08, 0x38, 0x80, 0x18, 0x05, 0x59, 0xbf,
						0xfb, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x00, 0x02, 0xe3, 0x73, 0x0b, 0x24, 0xf4, 0xfa, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x2f,
						0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x2f, 0x32, 0x30, 0x31, 0x32, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x76, 0x69,
						0x64, 0x65, 0x6f, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x3d, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x72, 0x65,
						0x61, 0x6d, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6e,
						0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c,
						0x69, 0x76, 0x65, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x2a, 0x2f, 0x2a, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65,
						0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x3b, 0x20, 0x41, 0x6e,
						0x64, 0x72, 0x6f, 0x69, 0x64, 0x20, 0x34, 0x2e, 0x34, 0x2e, 0x34, 0x3b, 0x20, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x20, 0x35, 0x20, 0x42, 0x75, 0x69, 0x6c, 0x64,
						0x2f, 0x4b, 0x54, 0x55, 0x38, 0x34, 0x50, 0x29, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x69, 0x74, 0x2f, 0x35, 0x33, 0x37, 0x2e, 0x33,
						0x36, 0x20, 0x28, 0x4b, 0x48, 0x54, 0x4d, 0x4c, 0x2c, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x47, 0x65, 0x63, 0x6b, 0x6f, 0x29, 0x20, 0x43, 0x68, 0x72, 0x6f,
						0x6d, 0x65, 0x2f, 0x33, 0x39, 0x2e, 0x30, 0x2e, 0x32, 0x31, 0x37, 0x31, 0x2e, 0x35, 0x39, 0x20, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x20, 0x53, 0x61, 0x66,
						0x61, 0x72, 0x69, 0x2f, 0x35, 0x33, 0x37, 0x2e, 0x33, 0x36, 0x0d, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
						0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x63, 0x6e, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63,
						0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67, 0x7a, 0x69, 0x70, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x73, 0x64, 0x63, 0x68,
						0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x65, 0x6e, 0x2d, 0x55, 0x53, 0x2c, 0x65,
						0x6e, 0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x38, 0x0d, 0x0a, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x3a, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x6c,
						0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3d, 0x25, 0x37, 0x42, 0x25, 0x32, 0x32, 0x31, 0x37, 0x30, 0x38, 0x36, 0x34, 0x38, 0x31, 0x30, 0x25,
						0x32, 0x32, 0x25, 0x33, 0x41, 0x25, 0x32, 0x32, 0x74, 0x72, 0x75, 0x65, 0x25, 0x32, 0x32, 0x25, 0x32, 0x43, 0x25, 0x32, 0x32, 0x31, 0x37, 0x31, 0x38, 0x35,
						0x34, 0x33, 0x39, 0x32, 0x25, 0x32, 0x32, 0x25, 0x33, 0x41, 0x25, 0x32, 0x32, 0x6e, 0x6f, 0x6e, 0x65, 0x25, 0x32, 0x32, 0x25, 0x32, 0x43, 0x25, 0x32, 0x32,
						0x31, 0x37, 0x32, 0x33, 0x33, 0x32, 0x31, 0x35, 0x35, 0x25, 0x32, 0x32, 0x25, 0x33, 0x41, 0x25, 0x32, 0x32, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x25, 0x32,
						0x32, 0x25, 0x32, 0x43, 0x25, 0x32, 0x32, 0x31, 0x37, 0x32, 0x34, 0x32, 0x36, 0x37, 0x33, 0x39, 0x25, 0x32, 0x32, 0x25, 0x33, 0x41, 0x25, 0x32, 0x32, 0x67,
						0x63, 0x25, 0x32, 0x32, 0x25, 0x37, 0x44, 0x3b, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x6c, 0x79, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
						0x49, 0x64, 0x3d, 0x6f, 0x65, 0x75, 0x31, 0x34, 0x31, 0x38, 0x32, 0x35, 0x39, 0x33, 0x39, 0x39, 0x32, 0x37, 0x36, 0x72, 0x30, 0x2e, 0x38, 0x38, 0x39, 0x35,
						0x31, 0x30, 0x37, 0x38, 0x34, 0x32, 0x39, 0x38, 0x31, 0x38, 0x31, 0x35, 0x3b, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x6c, 0x79, 0x42, 0x75,
						0x63, 0x6b, 0x65, 0x74, 0x73, 0x3d, 0x25, 0x37, 0x42, 0x25, 0x37, 0x44, 0x3b, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x6c, 0x79, 0x50, 0x65,
						0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3d, 0x25, 0x35, 0x42, 0x25, 0x35, 0x44, 0x0d, 0x0a, 0x0d, 0x0a},
				// 4
				{ 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x84, 0xdb, 0x2f, 0x0b, 0xfe, 0xf0, 0x00, 0x00, 0x08, 0x00, 0x45, 0x58, 0x00, 0x34, 0xfd, 0x35, 0x40, 0x00, 0x3e, 0x06, 0xf0,
						0xb6, 0x9d, 0xa6, 0xef, 0x26, 0xc0, 0xa8, 0x01, 0x0a, 0x00, 0x50, 0xbd, 0x41, 0x23, 0xe4, 0x08, 0x38, 0x3a, 0xa4, 0xa1, 0xf9, 0x80, 0x10, 0x00, 0x1e, 0x7e,
						0x2a, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x0b, 0x24, 0xf5, 0x0f, 0x00, 0x02, 0xe3, 0x73},
				// 5
				{ 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x84, 0xdb, 0x2f, 0x0b, 0xfe, 0xf0, 0x00, 0x00, 0x08, 0x00, 0x45, 0x58, 0x01, 0x83, 0xfd, 0x36, 0x40, 0x00, 0x3e, 0x06, 0xef,
						0x66, 0x9d, 0xa6, 0xef, 0x26, 0xc0, 0xa8, 0x01, 0x0a, 0x00, 0x50, 0xbd, 0x41, 0x23, 0xe4, 0x08, 0x38, 0x3a, 0xa4, 0xa1, 0xf9, 0x80, 0x18, 0x00, 0x1e, 0xce,
						0x56, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x0b, 0x24, 0xf5, 0x38, 0x00, 0x02, 0xe3, 0x73, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32, 0x30,
						0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x0d, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x3a,
						0x20, 0x54, 0x68, 0x75, 0x2c, 0x20, 0x31, 0x31, 0x20, 0x44, 0x65, 0x63, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x30, 0x30, 0x3a, 0x35, 0x36, 0x3a, 0x33, 0x39,
						0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
						0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x0d, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
						0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
						0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a, 0x56, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x41, 0x63,
						0x63, 0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x0d, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x2d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
						0x65, 0x64, 0x3a, 0x20, 0x53, 0x61, 0x74, 0x2c, 0x20, 0x30, 0x36, 0x20, 0x44, 0x65, 0x63, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x30, 0x31, 0x3a, 0x31, 0x39,
						0x3a, 0x32, 0x33, 0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x20, 0x6d, 0x61,
						0x78, 0x2d, 0x61, 0x67, 0x65, 0x3d, 0x31, 0x30, 0x2c, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d,
						0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67, 0x7a, 0x69, 0x70, 0x0d, 0x0a, 0x0d, 0x0a, 0x32, 0x33, 0x0d, 0x0a, 0x1f, 0x8b, 0x08, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xcb, 0xc9, 0x2c, 0x4b, 0x2d, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0xa8, 0xae, 0xd5, 0xb4, 0x06, 0x00, 0x15, 0xe6, 0x0f,
						0xfb, 0x0f, 0x00, 0x00, 0x00, 0x0d, 0x0a, 0x30, 0x0d, 0x0a, 0x0d, 0x0a},
				{ 0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x48, 0x59, 0x29, 0xf9, 0x25, 0x7b, 0x00, 0x00, 0x08, 0x00, 0x45, 0x00, 0x00, 0x34, 0x7c, 0x0b, 0x40, 0x00, 0x40, 0x06, 0x70,
						0x39, 0xc0, 0xa8, 0x01, 0x0a, 0x9d, 0xa6, 0xef, 0x26, 0xbd, 0x41, 0x00, 0x50, 0x3a, 0xa4, 0xa1, 0xf9, 0x23, 0xe4, 0x09, 0x87, 0x80, 0x10, 0x05, 0x6a, 0x4e,
						0xa6, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x00, 0x02, 0xe3, 0x8c, 0x0b, 0x24, 0xf5, 0x38},
				{ 0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x48, 0x59, 0x29, 0xf9, 0x25, 0x7b, 0x00, 0x00, 0x08, 0x00, 0x45, 0x00, 0x03, 0x73, 0x7c, 0x0c, 0x40, 0x00, 0x40, 0x06, 0x6c,
						0xf9, 0xc0, 0xa8, 0x01, 0x0a, 0x9d, 0xa6, 0xef, 0x26, 0xbd, 0x41, 0x00, 0x50, 0x3a, 0xa4, 0xa1, 0xf9, 0x23, 0xe4, 0x09, 0x87, 0x80, 0x18, 0x05, 0x6a, 0xfc,
						0xcf, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x00, 0x02, 0xe3, 0xeb, 0x0b, 0x24, 0xf5, 0x38, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x2f,
						0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x2f, 0x32, 0x30, 0x31, 0x34, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
						0x67, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x3d, 0x66, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x20, 0x48, 0x54,
						0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6e, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
						0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a,
						0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x2a, 0x2f, 0x2a, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d,
						0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x3b, 0x20, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
						0x20, 0x34, 0x2e, 0x34, 0x2e, 0x34, 0x3b, 0x20, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x20, 0x35, 0x20, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x4b, 0x54, 0x55, 0x38,
						0x34, 0x50, 0x29, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x69, 0x74, 0x2f, 0x35, 0x33, 0x37, 0x2e, 0x33, 0x36, 0x20, 0x28, 0x4b, 0x48,
						0x54, 0x4d, 0x4c, 0x2c, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x47, 0x65, 0x63, 0x6b, 0x6f, 0x29, 0x20, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2f, 0x33, 0x39,
						0x2e, 0x30, 0x2e, 0x32, 0x31, 0x37, 0x31, 0x2e, 0x35, 0x39, 0x20, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x20, 0x53, 0x61, 0x66, 0x61, 0x72, 0x69, 0x2f, 0x35,
						0x33, 0x37, 0x2e, 0x33, 0x36, 0x0d, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
						0x2e, 0x63, 0x6e, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
						0x3a, 0x20, 0x67, 0x7a, 0x69, 0x70, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x73, 0x64, 0x63, 0x68, 0x0d, 0x0a, 0x41, 0x63, 0x63,
						0x65, 0x70, 0x74, 0x2d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x65, 0x6e, 0x2d, 0x55, 0x53, 0x2c, 0x65, 0x6e, 0x3b, 0x71, 0x3d, 0x30,
						0x2e, 0x38, 0x0d, 0x0a, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x3a, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x6c, 0x79, 0x53, 0x65, 0x67, 0x6d,
						0x65, 0x6e, 0x74, 0x73, 0x3d, 0x25, 0x37, 0x42, 0x25, 0x32, 0x32, 0x31, 0x37, 0x30, 0x38, 0x36, 0x34, 0x38, 0x31, 0x30, 0x25, 0x32, 0x32, 0x25, 0x33, 0x41,
						0x25, 0x32, 0x32, 0x74, 0x72, 0x75, 0x65, 0x25, 0x32, 0x32, 0x25, 0x32, 0x43, 0x25, 0x32, 0x32, 0x31, 0x37, 0x31, 0x38, 0x35, 0x34, 0x33, 0x39, 0x32, 0x25,
						0x32, 0x32, 0x25, 0x33, 0x41, 0x25, 0x32, 0x32, 0x6e, 0x6f, 0x6e, 0x65, 0x25, 0x32, 0x32, 0x25, 0x32, 0x43, 0x25, 0x32, 0x32, 0x31, 0x37, 0x32, 0x33, 0x33,
						0x32, 0x31, 0x35, 0x35, 0x25, 0x32, 0x32, 0x25, 0x33, 0x41, 0x25, 0x32, 0x32, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x25, 0x32, 0x32, 0x25, 0x32, 0x43, 0x25,
						0x32, 0x32, 0x31, 0x37, 0x32, 0x34, 0x32, 0x36, 0x37, 0x33, 0x39, 0x25, 0x32, 0x32, 0x25, 0x33, 0x41, 0x25, 0x32, 0x32, 0x67, 0x63, 0x25, 0x32, 0x32, 0x25,
						0x37, 0x44, 0x3b, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x6c, 0x79, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3d, 0x6f, 0x65,
						0x75, 0x31, 0x34, 0x31, 0x38, 0x32, 0x35, 0x39, 0x33, 0x39, 0x39, 0x32, 0x37, 0x36, 0x72, 0x30, 0x2e, 0x38, 0x38, 0x39, 0x35, 0x31, 0x30, 0x37, 0x38, 0x34,
						0x32, 0x39, 0x38, 0x31, 0x38, 0x31, 0x35, 0x3b, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x6c, 0x79, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
						0x3d, 0x25, 0x37, 0x42, 0x25, 0x37, 0x44, 0x3b, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x6c, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
						0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3d, 0x25, 0x35, 0x42, 0x25, 0x35, 0x44, 0x3b, 0x20, 0x73, 0x5f, 0x63, 0x63, 0x3d, 0x74, 0x72, 0x75,
						0x65, 0x3b, 0x20, 0x73, 0x5f, 0x66, 0x69, 0x64, 0x3d, 0x30, 0x42, 0x32, 0x38, 0x36, 0x46, 0x38, 0x39, 0x36, 0x42, 0x35, 0x35, 0x38, 0x31, 0x42, 0x35, 0x2d,
						0x32, 0x44, 0x35, 0x44, 0x38, 0x43, 0x38, 0x46, 0x36, 0x37, 0x35, 0x35, 0x45, 0x32, 0x37, 0x38, 0x3b, 0x20, 0x73, 0x5f, 0x73, 0x71, 0x3d, 0x25, 0x35, 0x42,
						0x25, 0x35, 0x42, 0x42, 0x25, 0x35, 0x44, 0x25, 0x35, 0x44, 0x3b, 0x20, 0x5f, 0x5f, 0x76, 0x72, 0x66, 0x3d, 0x31, 0x34, 0x31, 0x38, 0x32, 0x35, 0x39, 0x34,
						0x30, 0x30, 0x32, 0x31, 0x33, 0x35, 0x70, 0x39, 0x74, 0x58, 0x74, 0x48, 0x4d, 0x49, 0x65, 0x30, 0x71, 0x48, 0x54, 0x34, 0x6b, 0x64, 0x6e, 0x34, 0x7a, 0x4a,
						0x31, 0x66, 0x52, 0x37, 0x4a, 0x39, 0x53, 0x32, 0x52, 0x74, 0x49, 0x3b, 0x20, 0x73, 0x5f, 0x76, 0x69, 0x3d, 0x5b, 0x43, 0x53, 0x5d, 0x76, 0x31, 0x7c, 0x32,
						0x41, 0x34, 0x34, 0x37, 0x35, 0x45, 0x34, 0x30, 0x35, 0x31, 0x44, 0x33, 0x36, 0x46, 0x33, 0x2d, 0x34, 0x30, 0x30, 0x30, 0x30, 0x31, 0x33, 0x33, 0x41, 0x30,
						0x31, 0x36, 0x36, 0x43, 0x35, 0x45, 0x5b, 0x43, 0x45, 0x5d, 0x0d, 0x0a, 0x0d, 0x0a},
				{ 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x84, 0xdb, 0x2f, 0x0b, 0xfe, 0xf0, 0x00, 0x00, 0x08, 0x00, 0x45, 0x58, 0x00, 0x34, 0xfd, 0x37, 0x40, 0x00, 0x3e, 0x06, 0xf0,
						0xb4, 0x9d, 0xa6, 0xef, 0x26, 0xc0, 0xa8, 0x01, 0x0a, 0x00, 0x50, 0xbd, 0x41, 0x23, 0xe4, 0x09, 0x87, 0x3a, 0xa4, 0xa5, 0x38, 0x80, 0x10, 0x00, 0x21, 0x77,
						0xf5, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x0b, 0x24, 0xf6, 0x3b, 0x00, 0x02, 0xe3, 0xeb},
				{ 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x84, 0xdb, 0x2f, 0x0b, 0xfe, 0xf0, 0x00, 0x00, 0x08, 0x00, 0x45, 0x58, 0x01, 0xf8, 0xfd, 0x38, 0x40, 0x00, 0x3e, 0x06, 0xee,
						0xef, 0x9d, 0xa6, 0xef, 0x26, 0xc0, 0xa8, 0x01, 0x0a, 0x00, 0x50, 0xbd, 0x41, 0x23, 0xe4, 0x09, 0x87, 0x3a, 0xa4, 0xa5, 0x38, 0x80, 0x18, 0x00, 0x21, 0xe1,
						0x75, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x0b, 0x24, 0xf6, 0x51, 0x00, 0x02, 0xe3, 0xeb, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32, 0x30,
						0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x0d, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x3a,
						0x20, 0x54, 0x68, 0x75, 0x2c, 0x20, 0x31, 0x31, 0x20, 0x44, 0x65, 0x63, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x30, 0x30, 0x3a, 0x35, 0x36, 0x3a, 0x34, 0x30,
						0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
						0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x0d, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
						0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
						0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a, 0x56, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x41, 0x63,
						0x63, 0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x0d, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x2d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
						0x65, 0x64, 0x3a, 0x20, 0x57, 0x65, 0x64, 0x2c, 0x20, 0x30, 0x35, 0x20, 0x4e, 0x6f, 0x76, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x31, 0x35, 0x3a, 0x32, 0x30,
						0x3a, 0x32, 0x32, 0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x20, 0x6d, 0x61,
						0x78, 0x2d, 0x61, 0x67, 0x65, 0x3d, 0x31, 0x30, 0x2c, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d,
						0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67, 0x7a, 0x69, 0x70, 0x0d, 0x0a, 0x0d, 0x0a, 0x39, 0x38, 0x0d, 0x0a, 0x1f, 0x8b, 0x08, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x4b, 0xcb, 0xc9, 0x2c, 0x28, 0x48, 0x2d, 0xd2, 0xa8, 0x56, 0x2a, 0x88, 0x2f, 0x2d, 0xca, 0x51, 0xb2, 0x52, 0x50, 0xca,
						0x28, 0x29, 0x29, 0xb0, 0xd2, 0xd7, 0x4f, 0x49, 0x2c, 0x49, 0xd4, 0x4b, 0xce, 0xcb, 0xd3, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x2a, 0xce, 0xcf, 0x2b, 0xd0, 0x37,
						0x2d, 0xd6, 0x77, 0xf5, 0x71, 0x75, 0x0e, 0xf1, 0xf4, 0xf7, 0xd3, 0x37, 0x32, 0x30, 0x34, 0xd1, 0x4f, 0x2b, 0xcd, 0xc9, 0xd1, 0x0f, 0xc8, 0xcf, 0xcb, 0xa9,
						0xd4, 0x03, 0xa9, 0x50, 0xd2, 0x51, 0x2a, 0x26, 0xc3, 0x94, 0xa4, 0xfc, 0x02, 0xfd, 0x62, 0x98, 0x01, 0x19, 0x64, 0x1a, 0x90, 0x01, 0x33, 0xa0, 0xb4, 0x00,
						0xe8, 0xf2, 0x54, 0xcf, 0xbc, 0x92, 0xd4, 0xa2, 0xb2, 0x44, 0x90, 0x87, 0x8c, 0x0d, 0x40, 0x40, 0x47, 0x29, 0x25, 0xb3, 0xb8, 0x20, 0x27, 0xb1, 0x12, 0x28,
						0x92, 0x96, 0x98, 0x53, 0x9c, 0x5a, 0xab, 0x69, 0x0d, 0x00, 0x12, 0xd2, 0x2e, 0x0a, 0xfd, 0x00, 0x00, 0x00, 0x0d, 0x0a, 0x30, 0x0d, 0x0a, 0x0d, 0x0a}
				};

		long[][] ts = {
				  {1418259399,508229} // 0
				, {1418259399,584003} // 1   
				, {1418259399,584107} // 2   
				, {1418259399,584348} // 3   
				, {1418259399,668032} // 4   
				, {1418259399,832014} // 5   
				, {1418259399,832084} // 6   
				, {1418259400,784473} // 7   
				, {1418259400,863935} // 8   
				, {1418259400,968940} // 9      
				, {1418259400,969032} // 10   
				, {1418259415,927918} // 11   
				, {1418259415,967598} // 12   
				, {1418259418,385695} // 13   
				, {1418259418,470419} // 14   
				};
		
		
		
		byte[] bytes = null;
		ArrayList<PacketInfo> packets  = new ArrayList<PacketInfo>();
		for (int index = 0; index < data.length; index++) {
			//bytes = data[index];

			bytes = toBytes(data[index]);
			
			long sec = ts[index][0];
			long msec = ts[index][1];
			Packet p1 = createPacketFromPcap(113, sec, msec, data[index].length, bytes);
			PacketInfo pi1 = new PacketInfo(p1);
		//	pi1.setTimestamp(pi1.getTimeStamp() - 1.421891491811314E9);
			packets.add(pi1);
		}
		
		return packets;
	}
	
	/**
	 * Loads byte arrays into Packets into PacketInfo into a ArrayList
	 * @return List
	 */
	public List<PacketInfo> getPacketList1() {
	
		char[][] data = {
				{ 0x47, 0x45, 0x54, 0x20, 0x2f, 0x62, 0x3f, 0x73, 0x3d, 0x37, 0x39, 0x32, 0x36, 0x30, 0x30, 0x31, 0x34, 0x36, 0x26, 0x5f, 0x52, 0x3d, 0x26, 0x5f, 0x4c, 0x3d, 0x6d, 0x25,
							0x30, 0x36, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x2d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x25, 0x30, 0x31, 0x6c, 0x25,
							0x30, 0x36, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x2d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x25, 0x30, 0x32,
							0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x2d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x25, 0x30, 0x32, 0x72, 0x65, 0x66, 0x72,
							0x65, 0x73, 0x68, 0x2d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x25, 0x30, 0x32, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x2d,
							0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x77, 0x68, 0x61, 0x74, 0x73, 0x2d, 0x6e, 0x65, 0x77, 0x2d, 0x63, 0x74, 0x61, 0x25, 0x30, 0x38, 0x6d, 0x25, 0x30, 0x36,
							0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x6e, 0x61, 0x76, 0x25, 0x30, 0x31, 0x6c, 0x25, 0x30, 0x36, 0x4c, 0x6f, 0x67, 0x6f, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x25,
							0x30, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x25, 0x30, 0x32, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x61, 0x69,
							0x6e, 0x25, 0x30, 0x32, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x25, 0x30,
							0x32, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x2d, 0x74, 0x68, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x25, 0x30, 0x32, 0x45, 0x78, 0x70, 0x6c,
							0x6f, 0x72, 0x65, 0x2d, 0x67, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x25, 0x30, 0x32, 0x45, 0x78, 0x70, 0x6c,
							0x6f, 0x72, 0x65, 0x2d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x25, 0x30, 0x32, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x2d, 0x77, 0x6f, 0x72,
							0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x25, 0x30, 0x32, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x61, 0x72, 0x64, 0x65, 0x6e,
							0x25, 0x30, 0x32, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x2d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x25, 0x30, 0x32,
							0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x2d, 0x66, 0x6c, 0x69, 0x63, 0x6b, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x25, 0x30, 0x32, 0x55, 0x70, 0x6c, 0x6f, 0x61,
							0x64, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x25, 0x30, 0x32, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x25, 0x30, 0x38,
							0x6d, 0x25, 0x30, 0x36, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x25, 0x30, 0x31, 0x6c, 0x25, 0x30, 0x36, 0x61,
							0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x65, 0x6e, 0x75, 0x2d, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x25, 0x30, 0x32, 0x25, 0x32, 0x33, 0x25, 0x30, 0x32, 0x25, 0x32,
							0x33, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x25, 0x30, 0x32, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x6d, 0x65, 0x6e, 0x75, 0x2d, 0x63, 0x6c, 0x69, 0x63,
							0x6b, 0x25, 0x30, 0x32, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x25, 0x30, 0x32, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x6f, 0x78, 0x25,
							0x30, 0x32, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x25, 0x30, 0x38, 0x6d, 0x25, 0x30, 0x36, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
							0x73, 0x25, 0x30, 0x31, 0x6c, 0x25, 0x30, 0x36, 0x25, 0x32, 0x46, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x25, 0x32, 0x46, 0x25, 0x32, 0x46, 0x25, 0x30, 0x32, 0x25,
							0x32, 0x46, 0x68, 0x74, 0x6d, 0x6c, 0x2e, 0x67, 0x6e, 0x65, 0x25, 0x33, 0x46, 0x74, 0x69, 0x67, 0x68, 0x74, 0x65, 0x6e, 0x25, 0x33, 0x44, 0x30, 0x25, 0x32, 0x36,
							0x74, 0x79, 0x70, 0x65, 0x25, 0x33, 0x44, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x26, 0x74, 0x3d, 0x31, 0x33, 0x37, 0x30, 0x33, 0x37, 0x37, 0x34, 0x32, 0x36,
							0x26, 0x5f, 0x50, 0x3d, 0x32, 0x2e, 0x39, 0x2e, 0x34, 0x25, 0x30, 0x35, 0x41, 0x5f, 0x70, 0x6e, 0x25, 0x30, 0x33, 0x25, 0x32, 0x46, 0x70, 0x68, 0x6f, 0x74, 0x6f,
							0x2e, 0x67, 0x6e, 0x65, 0x25, 0x30, 0x34, 0x41, 0x5f, 0x73, 0x69, 0x64, 0x25, 0x30, 0x33, 0x51, 0x68, 0x49, 0x50, 0x70, 0x41, 0x65, 0x73, 0x30, 0x46, 0x74, 0x69,
							0x25, 0x30, 0x34, 0x5f, 0x77, 0x25, 0x30, 0x33, 0x77, 0x77, 0x77, 0x2e, 0x66, 0x6c, 0x69, 0x63, 0x6b, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x25, 0x32, 0x46, 0x70, 0x68,
							0x6f, 0x74, 0x6f, 0x73, 0x25, 0x32, 0x46, 0x39, 0x32, 0x34, 0x35, 0x37, 0x32, 0x34, 0x32, 0x25, 0x34, 0x30, 0x4e, 0x30, 0x34, 0x25, 0x32, 0x46, 0x38, 0x34, 0x30,
							0x34, 0x30, 0x35, 0x32, 0x39, 0x36, 0x32, 0x25, 0x32, 0x46, 0x25, 0x30, 0x34, 0x41, 0x5f, 0x25, 0x30, 0x33, 0x31, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e,
							0x31, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x67, 0x65, 0x6f, 0x2e, 0x79, 0x61, 0x68, 0x6f, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x55, 0x73, 0x65,
							0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x4d, 0x61, 0x63, 0x69, 0x6e,
							0x74, 0x6f, 0x73, 0x68, 0x3b, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x20, 0x4f, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x5f, 0x38, 0x5f, 0x33,
							0x29, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x69, 0x74, 0x2f, 0x35, 0x33, 0x36, 0x2e, 0x32, 0x39, 0x2e, 0x31, 0x33, 0x20, 0x28, 0x4b, 0x48,
							0x54, 0x4d, 0x4c, 0x2c, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x47, 0x65, 0x63, 0x6b, 0x6f, 0x29, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x36, 0x2e,
							0x30, 0x2e, 0x34, 0x20, 0x53, 0x61, 0x66, 0x61, 0x72, 0x69, 0x2f, 0x35, 0x33, 0x36, 0x2e, 0x32, 0x39, 0x2e, 0x31, 0x33, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70,
							0x74, 0x3a, 0x20, 0x2a, 0x2f, 0x2a, 0x0d, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
							0x2e, 0x66, 0x6c, 0x69, 0x63, 0x6b, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x39, 0x32, 0x34, 0x35, 0x37, 0x32, 0x34, 0x32,
							0x40, 0x4e, 0x30, 0x34, 0x2f, 0x38, 0x34, 0x30, 0x34, 0x30, 0x35, 0x32, 0x39, 0x36, 0x32, 0x2f, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74 }
				,{ 0x2d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x65, 0x6e, 0x2d, 0x75, 0x73, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63,
							0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67, 0x7a, 0x69, 0x70, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
							0x65, 0x3a, 0x20, 0x75, 0x63, 0x73, 0x3d, 0x62, 0x6e, 0x61, 0x73, 0x3d, 0x30, 0x3b, 0x20, 0x42, 0x3d, 0x61, 0x63, 0x74, 0x6e, 0x6e, 0x69, 0x70, 0x38, 0x69, 0x76,
							0x33, 0x61, 0x36, 0x26, 0x62, 0x3d, 0x33, 0x26, 0x73, 0x3d, 0x34, 0x6c, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b,
							0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a, 0x0d, 0x0a }
				,{ 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x54, 0x75, 0x65, 0x2c, 0x20,
							0x30, 0x34, 0x20, 0x4a, 0x75, 0x6e, 0x20, 0x32, 0x30, 0x31, 0x33, 0x20, 0x32, 0x30, 0x3a, 0x32, 0x33, 0x3a, 0x34, 0x34, 0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a, 0x50,
							0x33, 0x50, 0x3a, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
							0x79, 0x61, 0x68, 0x6f, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x33, 0x63, 0x2f, 0x70, 0x33, 0x70, 0x2e, 0x78, 0x6d, 0x6c, 0x22, 0x2c, 0x20, 0x43, 0x50, 0x3d,
							0x22, 0x43, 0x41, 0x4f, 0x20, 0x44, 0x53, 0x50, 0x20, 0x43, 0x4f, 0x52, 0x20, 0x43, 0x55, 0x52, 0x20, 0x41, 0x44, 0x4d, 0x20, 0x44, 0x45, 0x56, 0x20, 0x54, 0x41,
							0x49, 0x20, 0x50, 0x53, 0x41, 0x20, 0x50, 0x53, 0x44, 0x20, 0x49, 0x56, 0x41, 0x69, 0x20, 0x49, 0x56, 0x44, 0x69, 0x20, 0x43, 0x4f, 0x4e, 0x69, 0x20, 0x54, 0x45,
							0x4c, 0x6f, 0x20, 0x4f, 0x54, 0x50, 0x69, 0x20, 0x4f, 0x55, 0x52, 0x20, 0x44, 0x45, 0x4c, 0x69, 0x20, 0x53, 0x41, 0x4d, 0x69, 0x20, 0x4f, 0x54, 0x52, 0x69, 0x20,
							0x55, 0x4e, 0x52, 0x69, 0x20, 0x50, 0x55, 0x42, 0x69, 0x20, 0x49, 0x4e, 0x44, 0x20, 0x50, 0x48, 0x59, 0x20, 0x4f, 0x4e, 0x4c, 0x20, 0x55, 0x4e, 0x49, 0x20, 0x50,
							0x55, 0x52, 0x20, 0x46, 0x49, 0x4e, 0x20, 0x43, 0x4f, 0x4d, 0x20, 0x4e, 0x41, 0x56, 0x20, 0x49, 0x4e, 0x54, 0x20, 0x44, 0x45, 0x4d, 0x20, 0x43, 0x4e, 0x54, 0x20,
							0x53, 0x54, 0x41, 0x20, 0x50, 0x4f, 0x4c, 0x20, 0x48, 0x45, 0x41, 0x20, 0x50, 0x52, 0x45, 0x20, 0x4c, 0x4f, 0x43, 0x20, 0x47, 0x4f, 0x56, 0x22, 0x0d, 0x0a, 0x43,
							0x61, 0x63, 0x68, 0x65, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x20, 0x6e, 0x6f, 0x2d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x2d,
							0x73, 0x74, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x50, 0x72, 0x61, 0x67, 0x6d, 0x61, 0x3a, 0x20, 0x6e, 0x6f, 0x2d,
							0x63, 0x61, 0x63, 0x68, 0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x34, 0x33, 0x0d, 0x0a,
							0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d,
							0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x67, 0x69, 0x66, 0x0d, 0x0a, 0x0d, 0x0a, 0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x01, 0x00,
							0x01, 0x00, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
							0x00, 0x00, 0x02, 0x02, 0x44, 0x01, 0x00, 0x3b }
		};
	
		long seconds = 1394754475L;
		long milSec = 514072L;
		
		byte[] bytes = null;
		ArrayList<PacketInfo> packets = new ArrayList<PacketInfo>();
		
		for (int index = 0; index < data.length; index++) {
			bytes = toBytes(data[index]);
			packets.add(new PacketInfo(createPacketFromPcap(1, seconds++, milSec, 66, bytes)));

		}
		
		return packets;
	}

	private static final int DLT_EN10MB = 1;
	private static final int DLT_RAW = 12;
	private static final int DLT_LINUX_SLL = 113;
	private static final short IP = 0x0800;
	private static final short IPv6 = (short)0x86DD;

	private Packet createPacketFromPcap(int datalink, long seconds, long microSeconds, int len, byte[] data) {

		// Determine network protocol
		short network = 0;
		int hdrLen = 0;
		ByteBuffer bytes = ByteBuffer.wrap(data);
		try {
			switch (datalink) {
			case DLT_RAW: // Raw IP
				network = IP;
				break;
			case DLT_EN10MB: // Ethernet (WiFi)
				network = bytes.getShort(12);
				hdrLen = 14;
				break;
			case DLT_LINUX_SLL: // Linux cooked capture (Android)
				network = bytes.getShort(14);
				hdrLen = 16;
				break;
			default:
			}
		} catch (IndexOutOfBoundsException e) {
			// Truncated packet
		}
		

		return createPacket(network, seconds, microSeconds, len, hdrLen, data);

	}
	
	public Packet createPacket(short network, long seconds, long microSeconds, int len, int datalinkHdrLen, byte[] data) {

		// Minimum IP header length is 20 bytes
		ByteBuffer bytes = ByteBuffer.wrap(data);
		if ((network == IPv6) && (data.length >= datalinkHdrLen + 40)) {
			// Determine IPv6 protocol
			byte protocol = bytes.get(datalinkHdrLen + 6);
			switch (protocol) {
			case 6: // TCP
				return new TCPPacket(seconds, microSeconds, len, datalinkHdrLen, data);
			case 17: // UDP
				return new UDPPacket(seconds, microSeconds, len, datalinkHdrLen, data);
			default:
				return new IPPacket(seconds, microSeconds, len, datalinkHdrLen, data);
			}
		} else if ((network == IP) && (data.length >= datalinkHdrLen + 20)) {

			byte iphlen = (byte) ((bytes.get(datalinkHdrLen) & 0x0f) << 2);
			if (data.length < datalinkHdrLen + iphlen) {

				// Truncated packet
				return new Packet(seconds, microSeconds, len, datalinkHdrLen, data);
			}

			// Determine IP protocol
			byte protocol = bytes.get(datalinkHdrLen + 9);
			switch (protocol) {
			case 6: // TCP
				if (data.length >= datalinkHdrLen + iphlen + 20) {
					return new TCPPacket(seconds, microSeconds, len, datalinkHdrLen, data);
				} else {
					return new Packet(seconds, microSeconds, len, datalinkHdrLen, data);
				}
			case 17: // UDP
				if (data.length >= datalinkHdrLen + iphlen + 6) {
					return new UDPPacket(seconds, microSeconds, len, datalinkHdrLen, data);
				} else {
					return new Packet(seconds, microSeconds, len, datalinkHdrLen, data);
				}
			default:
				return new IPPacket(seconds, microSeconds, len, datalinkHdrLen, data);
			}
		} else {
			return new Packet(seconds, microSeconds, len, datalinkHdrLen, data);
		}

	}

	/**
	 * Loads byte arrays into Packets into PacketInfo into a ArrayList
	 * @return List
	 */
	public List<PacketInfo> getPacketList2() {
	
		byte[][] data = {
//		{0, 4, 0, 1, 0, 6, 24, -121, -106, -128, 93, 120, 0, 0, 8, 0, 69, 0, 0, 52, 73, -20, 64, 0, 64, 6, -122, -18, 10, 0, 1, 14, 74, 125, 20, 95, -56, -37, 1, -69, -48, 121, 122, 43, -74, 36, 99, -35, -128, 17, 4, -78, 106, 16, 0, 0, 1, 1, 8, 10, 0, 3, 82, -76, -67, 49, 0, -50}
		{0, 4, 0, 1, 0, 6, 24, -121, -106, -128, 93, 120, 0, 0, 8, 0, 69, 0, 0, 60, 98, -41, 64, 0, 64, 6, 83, 91, 10, 0, 1, 14, 24, 16, 97, 108, -103, 36, 31, -112, 66, 53, 48, 31, 0, 0, 0, 0, -96, 2, -1, -1, -124, -72, 0, 0, 2, 4, 5, -76, 4, 2, 8, 10, 0, 3, 82, -56, 0, 0, 0, 0, 1, 3, 3, 6}
		,{0, 0, 0, 1, 0, 6, 0, 36, 54, -98, 7, 116, 0, 0, 8, 0, 69, 0, 0, 64, -50, -81, 64, 0, 63, 6, -24, 126, 24, 16, 97, 108, 10, 0, 1, 14, 31, -112, -103, 36, 109, 114, -4, -49, 66, 53, 48, 32, -80, 18, -1, -1, 53, -3, 0, 0, 2, 4, 5, -76, 1, 3, 3, 3, 1, 1, 8, 10, 85, -85, 62, -91, 0, 3, 82, -56, 4, 2, 0, 0}
		,{0, 4, 0, 1, 0, 6, 24, -121, -106, -128, 93, 120, 0, 0, 8, 0, 69, 0, 0, 52, 98, -40, 64, 0, 64, 6, 83, 98, 10, 0, 1, 14, 24, 16, 97, 108, -103, 36, 31, -112, 66, 53, 48, 32, 109, 114, -4, -48, -128, 16, 4, 0, -124, -80, 0, 0, 1, 1, 8, 10, 0, 3, 82, -46, 85, -85, 62, -91}
		,{0, 4, 0, 1, 0, 6, 24, -121, -106, -128, 93, 120, 0, 0, 8, 0, 69, 0, 2, 14, 98, -39, 64, 0, 64, 6, 81, -121, 10, 0, 1, 14, 24, 16, 97, 108, -103, 36, 31, -112, 66, 53, 48, 32, 109, 114, -4, -48, -128, 24, 4, 0, 35, 62, 0, 0, 1, 1, 8, 10, 0, 3, 82, -46, 85, -85, 62, -91, 80, 79, 83, 84, 32, 47, 99, 111, 109, 46, 110, 101, 108, 115, 111, 102, 116, 46, 97, 114, 101, 101, 98, 97, 47, 83, 101, 114, 118, 105, 99, 101, 115, 47, 76, 111, 103, 105, 110, 47, 82, 101, 113, 117, 101, 115, 116, 76, 111, 103, 105, 110, 85, 115, 101, 114, 32, 72, 84, 84, 80, 47, 49, 46, 49, 13, 10, 65, 99, 99, 101, 112, 116, 58, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 106, 115, 111, 110, 13, 10, 67, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 32, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 13, 10, 67, 111, 110, 116, 101, 110, 116, 45, 76, 101, 110, 103, 116, 104, 58, 32, 50, 50, 57, 13, 10, 72, 111, 115, 116, 58, 32, 50, 52, 46, 49, 54, 46, 57, 55, 46, 49, 48, 56, 58, 56, 48, 56, 48, 13, 10, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 58, 32, 75, 101, 101, 112, 45, 65, 108, 105, 118, 101, 13, 10, 85, 115, 101, 114, 45, 65, 103, 101, 110, 116, 58, 32, 65, 112, 97, 99, 104, 101, 45, 72, 116, 116, 112, 67, 108, 105, 101, 110, 116, 47, 85, 78, 65, 86, 65, 73, 76, 65, 66, 76, 69, 32, 40, 106, 97, 118, 97, 32, 49, 46, 52, 41, 13, 10, 13, 10, 123, 34, 97, 99, 99, 111, 117, 110, 116, 73, 68, 34, 58, 48, 44, 34, 116, 111, 107, 101, 110, 73, 68, 34, 58, 45, 53, 44, 34, 117, 115, 101, 114, 73, 68, 34, 58, 45, 49, 44, 34, 115, 116, 97, 116, 117, 115, 34, 58, 34, 34, 44, 34, 115, 101, 114, 118, 101, 114, 72, 97, 115, 104, 75, 101, 121, 34, 58, 34, 34, 44, 34, 100, 101, 118, 105, 99, 101, 72, 97, 115, 104, 34, 58, 34, 34, 44, 34, 117, 115, 101, 114, 80, 73, 78, 34, 58, 34, 49, 50, 51, 52, 34, 44, 34, 117, 115, 101, 114, 78, 97, 109, 101, 34, 58, 34, 66, 97, 114, 114, 121, 34, 44, 34, 100, 101, 118, 105, 99, 101, 73, 77, 69, 73, 34, 58, 34, 51, 53, 56, 50, 51, 57, 48, 53, 55, 53, 50, 49, 49, 51, 50, 32, 76, 71, 69, 32, 77, 111, 100, 101, 108, 32, 78, 101, 120, 117, 115, 32, 53, 32, 86, 101, 114, 115, 105, 111, 110, 32, 52, 46, 52, 46, 50, 34, 44, 34, 100, 101, 118, 105, 99, 101, 73, 77, 83, 73, 34, 58, 34, 32, 34, 44, 34, 118, 101, 114, 115, 105, 111, 110, 78, 117, 109, 98, 101, 114, 34, 58, 34, 49, 46, 48, 46, 48, 46, 48, 34, 125}
		,{0, 0, 0, 1, 0, 6, 0, 36, 54, -98, 7, 116, 0, 0, 8, 0, 69, 0, 0, 52, 73, -21, 64, 0, 63, 6, 109, 79, 24, 16, 97, 108, 10, 0, 1, 14, 31, -112, -103, 36, 109, 114, -4, -48, 66, 53, 48, 32, -128, 16, -1, -1, 117, 95, 0, 0, 1, 1, 8, 10, 85, -85, 63, 6, 0, 3, 82, -46}
		,{0, 0, 0, 1, 0, 6, 0, 36, 54, -98, 7, 116, 0, 0, 8, 0, 69, 0, 0, 52, -35, -76, 64, 0, 63, 6, -39, -123, 24, 16, 97, 108, 10, 0, 1, 14, 31, -112, -103, 36, 109, 114, -4, -48, 66, 53, 49, -6, -128, 16, -1, -1, 115, -125, 0, 0, 1, 1, 8, 10, 85, -85, 63, 8, 0, 3, 82, -46}
		,{0, 0, 0, 1, 0, 6, 0, 36, 54, -98, 7, 116, 0, 0, 8, 0, 69, 0, 1, -117, 112, -24, 64, 0, 63, 6, 68, -5, 24, 16, 97, 108, 10, 0, 1, 14, 31, -112, -103, 36, 109, 114, -4, -48, 66, 53, 49, -6, -128, 24, -1, -1, 59, 84, 0, 0, 1, 1, 8, 10, 85, -85, 63, 10, 0, 3, 82, -46, 72, 84, 84, 80, 47, 49, 46, 49, 32, 50, 48, 48, 32, 79, 75, 13, 10, 83, 101, 114, 118, 101, 114, 58, 32, 65, 112, 97, 99, 104, 101, 45, 67, 111, 121, 111, 116, 101, 47, 49, 46, 49, 13, 10, 67, 111, 110, 116, 101, 110, 116, 45, 76, 101, 110, 103, 116, 104, 58, 32, 50, 51, 57, 13, 10, 68, 97, 116, 101, 58, 32, 84, 104, 117, 44, 32, 50, 50, 32, 74, 97, 110, 32, 50, 48, 49, 53, 32, 48, 49, 58, 53, 49, 58, 51, 50, 32, 71, 77, 84, 13, 10, 13, 10, 123, 34, 117, 115, 101, 114, 78, 97, 109, 101, 34, 58, 34, 66, 97, 114, 114, 121, 34, 44, 34, 117, 115, 101, 114, 73, 68, 34, 58, 49, 50, 51, 53, 55, 44, 34, 117, 115, 101, 114, 80, 73, 78, 34, 58, 34, 49, 50, 51, 52, 34, 44, 34, 100, 101, 118, 105, 99, 101, 73, 77, 83, 73, 34, 58, 34, 32, 34, 44, 34, 100, 101, 118, 105, 99, 101, 73, 77, 69, 73, 34, 58, 34, 51, 53, 56, 50, 51, 57, 48, 53, 55, 53, 50, 49, 49, 51, 50, 32, 76, 71, 69, 32, 77, 111, 100, 101, 108, 32, 78, 101, 120, 117, 115, 32, 53, 32, 86, 101, 114, 115, 105, 111, 110, 32, 52, 46, 52, 46, 50, 34, 44, 34, 118, 101, 114, 115, 105, 111, 110, 78, 117, 109, 98, 101, 114, 34, 58, 34, 49, 46, 48, 46, 48, 46, 48, 34, 44, 34, 100, 101, 118, 105, 99, 101, 72, 97, 115, 104, 34, 58, 34, 34, 44, 34, 115, 116, 97, 116, 117, 115, 34, 58, 34, 111, 107, 34, 44, 34, 116, 111, 107, 101, 110, 73, 68, 34, 58, 53, 51, 57, 44, 34, 97, 99, 99, 111, 117, 110, 116, 73, 68, 34, 58, 52, 50, 51, 49, 44, 34, 115, 101, 114, 118, 101, 114, 72, 97, 115, 104, 75, 101, 121, 34, 58, 34, 34, 125, 10}
		,{0, 4, 0, 1, 0, 6, 24, -121, -106, -128, 93, 120, 0, 0, 8, 0, 69, 0, 0, 52, 98, -38, 64, 0, 64, 6, 83, 96, 10, 0, 1, 14, 24, 16, 97, 108, -103, 36, 31, -112, 66, 53, 49, -6, 109, 114, -2, 39, -128, 16, 4, 17, -124, -80, 0, 0, 1, 1, 8, 10, 0, 3, 82, -43, 85, -85, 63, 10}
//		,{0, 1, 0, 1, 0, 6, 0, 35, 50, -111, 104, -64, 0, 0, 8, 0, 69, 0, 0, 44, -33, -43, 0, 0, 64, 17, -125, 127, 10, 0, 1, 110, 10, 0, 1, -1, -34, 37, 33, -92, 0, 24, 89, -10, 66, 78, 74, 66, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
//		,{0, 2, 0, 1, 0, 6, 0, 35, 50, -111, 104, -64, 0, 0, 8, 0, 69, 0, 0, 44, 9, -27, 0, 0, 1, 17, -60, 109, 10, 0, 1, 110, -32, 0, 0, 1, -35, 65, 33, -92, 0, 24, -122, -41, 66, 78, 74, 66, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
//		,{0, 2, 0, 1, 0, 6, 0, -48, -72, 13, 35, 55, 0, 0, 8, 0, 69, 0, 1, 72, 0, 0, 64, 0, 4, 17, 122, 101, 10, 0, 1, 70, -17, -1, -1, -6, 7, 108, 7, 108, 1, 52, -108, -102, 78, 79, 84, 73, 70, 89, 32, 42, 32, 72, 84, 84, 80, 47, 49, 46, 49, 13, 10, 72, 79, 83, 84, 58, 32, 50, 51, 57, 46, 50, 53, 53, 46, 50, 53, 53, 46, 50, 53, 48, 58, 49, 57, 48, 48, 13, 10, 67, 65, 67, 72, 69, 45, 67, 79, 78, 84, 82, 79, 76, 58, 32, 109, 97, 120, 45, 97, 103, 101, 61, 49, 56, 49, 48, 13, 10, 76, 79, 67, 65, 84, 73, 79, 78, 58, 32, 104, 116, 116, 112, 58, 47, 47, 49, 48, 46, 48, 46, 49, 46, 55, 48, 58, 57, 48, 48, 48, 47, 68, 101, 118, 105, 99, 101, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 46, 120, 109, 108, 13, 10, 78, 84, 58, 32, 117, 117, 105, 100, 58, 55, 48, 55, 54, 52, 51, 54, 102, 45, 54, 101, 54, 53, 45, 49, 48, 54, 51, 45, 56, 48, 55, 52, 45, 48, 48, 100, 48, 98, 56, 48, 100, 50, 51, 51, 55, 13, 10, 78, 84, 83, 58, 32, 115, 115, 100, 112, 58, 97, 108, 105, 118, 101, 13, 10, 83, 69, 82, 86, 69, 82, 58, 32, 76, 105, 110, 117, 120, 47, 50, 46, 120, 46, 120, 44, 32, 85, 80, 110, 80, 47, 49, 46, 48, 44, 32, 112, 118, 67, 111, 110, 110, 101, 99, 116, 32, 85, 80, 110, 80, 32, 83, 68, 75, 47, 49, 46, 48, 13, 10, 85, 83, 78, 58, 32, 117, 117, 105, 100, 58, 55, 48, 55, 54, 52, 51, 54, 102, 45, 54, 101, 54, 53, 45, 49, 48, 54, 51, 45, 56, 48, 55, 52, 45, 48, 48, 100, 48, 98, 56, 48, 100, 50, 51, 51, 55, 13, 10, 13, 10}
		};
	
		long[][] ts = {
		//		  {1421891491,811314} // 1   0    
				  {1421891492,012626} // 2   1    
				, {1421891492,111116} // 3   1    
				, {1421891492,111238} // 4   1    
				, {1421891492,114534} // 5   1    <<<< 0.3032197952270508
				, {1421891492,141300} // 6   1    
				, {1421891492,141361} // 7   1    
				, {1421891492,141392} // 8   1    
				, {1421891492,141636} // 9   1    
			//	, {1421891494,232984} // 10  UDP   
			//	, {1421891494,233228} // 11  UDP 
			//	, {1421891495,155065} // 12  UDP
				};
		
		
		
		byte[] bytes = null;
		ArrayList<PacketInfo> packets  = new ArrayList<PacketInfo>();
		for (int index = 0; index < data.length; index++) {
			bytes = data[index];
			long sec = ts[index][0];
			long msec = ts[index][1];
			Packet p1 = createPacketFromPcap(113, sec, msec, data[index].length, bytes);
			PacketInfo pi1 = new PacketInfo(p1);
			pi1.setTimestamp(pi1.getTimeStamp() - 1.421891491811314E9);
			packets.add(pi1);
		}
		
		return packets;
	}
	
	private byte[] toBytes(char[] chars) {
		CharBuffer charBuffer = CharBuffer.wrap(chars);
		ByteBuffer byteBuffer = Charset.forName("UTF-8").encode(charBuffer);
		byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());
		Arrays.fill(charBuffer.array(), '\u0000'); // clear sensitive data
		Arrays.fill(byteBuffer.array(), (byte) 0); // clear sensitive data
		return bytes;
	}
}
